const fs = require('fs');
const marked = require('./marked-math-support.js');


marked.setOptions({
  mathDelimiters: [['$', '$'], ['\\(', '\\)'], ['\\[', '\\]'], ['$$', '$$'], 'beginend']
});

const template = fs.readFileSync(__dirname + '/template.html', 'utf8');

const googleAnalyticsScript = `    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
      ga('create', 'UA-83637895-1', 'auto');
      ga('send', 'pageview');
    </script>`;


function render(data, googleAnalytics) {
  var out = template;
  const match = (/^<!--\s*title:\s*(.+?)\s*-->/).exec(data);
  if (match) {
    out = out.replace('<!-- [title] -->', `<title>${match[1]}</title>`);
  }
  out = out.replace('<!-- [content] -->', marked(data));
  if (googleAnalytics) {
    out = out.replace('  </head>', googleAnalyticsScript + '\n\n  </head>');
  }
  return out;
}

// function md(text, headerShift) {
//   if (headerShift) {
//     var renderer = new marked.Renderer();
//     renderer.heading = function (text, level) {
//       return `<h${level+headerShift}>${text}</h${level+headerShift}>`;
//     };
//     return marked(text, { renderer: renderer });
//   }
//   return marked(text);
// }

module.exports = render;

if (!module.parent) {
  const path = process.argv[2];
  if (path) {
    console.log('<!-- Generated by https://github.com/ViktorQvarfordt/lightweight-markdown-server -->');
    console.log(render(fs.readFileSync(path, 'utf8')));
  } else {
    console.log('Specify file to htmlify');
  }
}
